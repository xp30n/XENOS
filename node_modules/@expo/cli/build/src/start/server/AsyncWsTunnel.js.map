{"version":3,"sources":["../../../../src/start/server/AsyncWsTunnel.ts"],"sourcesContent":["import * as tunnel from '@expo/ws-tunnel';\nimport chalk from 'chalk';\nimport { randomBytes } from 'node:crypto';\n\nimport * as Log from '../../log';\nimport { env } from '../../utils/env';\nimport { CommandError } from '../../utils/errors';\n\nconst debug = require('debug')('expo:start:server:ws-tunnel') as typeof console.log;\n\nexport class AsyncWsTunnel {\n  /** Info about the currently running instance of tunnel. */\n  private serverUrl: string | null = null;\n\n  constructor(_projectRoot: string, port: number) {\n    if (port !== 8081) {\n      throw new CommandError(\n        'WS_TUNNEL_PORT',\n        `WS-tunnel only supports tunneling over port 8081, attempted to use port ${port}`\n      );\n    }\n  }\n\n  public getActiveUrl(): string | null {\n    return this.serverUrl;\n  }\n\n  async startAsync(): Promise<void> {\n    this.serverUrl = await tunnel.startAsync({\n      ...getTunnelOptions(),\n      onStatusChange(status) {\n        if (status === 'disconnected') {\n          Log.error(\n            chalk.red(\n              'Tunnel connection has been closed. This is often related to intermittent connection problems with the ws proxy servers. Restart the dev server to try connecting again.'\n            ) + chalk.gray('\\nCheck the Expo status page for outages: https://status.expo.dev/')\n          );\n        }\n      },\n    });\n\n    debug('Tunnel URL:', this.serverUrl);\n  }\n\n  async stopAsync(): Promise<void> {\n    debug('Stopping Tunnel');\n    await tunnel.stopAsync();\n    this.serverUrl = null;\n  }\n}\n\nfunction getTunnelOptions() {\n  const userDefinedSubdomain = env.EXPO_TUNNEL_SUBDOMAIN;\n  if (userDefinedSubdomain && typeof userDefinedSubdomain === 'string') {\n    debug('Session:', userDefinedSubdomain);\n    return { session: userDefinedSubdomain };\n  }\n\n  let session: string;\n  do {\n    // TODO(cedric): replace this with non-random data generated from server to manage and prevent overlapping sessions\n    session = randomBytes(12).toString('base64url');\n  } while (!/^[A-Za-z0-9]/.test(session));\n  debug('Session:', session);\n  return { session };\n}\n"],"names":["AsyncWsTunnel","debug","require","serverUrl","constructor","_projectRoot","port","CommandError","getActiveUrl","startAsync","tunnel","getTunnelOptions","onStatusChange","status","Log","error","chalk","red","gray","stopAsync","userDefinedSubdomain","env","EXPO_TUNNEL_SUBDOMAIN","session","randomBytes","toString","test"],"mappings":"AAAA;;;;+BAUaA,eAAa;;aAAbA,aAAa;;;+DAVF,iBAAiB;;;;;;;8DACvB,OAAO;;;;;;;yBACG,aAAa;;;;;;2DAEpB,WAAW;qBACZ,iBAAiB;wBACR,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEjD,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,6BAA6B,CAAC,AAAsB,AAAC;AAE7E,MAAMF,aAAa;IACxB,yDAAyD,GACzD,AAAQG,SAAS,GAAkB,IAAI,CAAC;IAExCC,YAAYC,YAAoB,EAAEC,IAAY,CAAE;QAC9C,IAAIA,IAAI,KAAK,IAAI,EAAE;YACjB,MAAM,IAAIC,OAAY,aAAA,CACpB,gBAAgB,EAChB,CAAC,wEAAwE,EAAED,IAAI,CAAC,CAAC,CAClF,CAAC;QACJ,CAAC;IACH;IAEOE,YAAY,GAAkB;QACnC,OAAO,IAAI,CAACL,SAAS,CAAC;IACxB;UAEMM,UAAU,GAAkB;QAChC,IAAI,CAACN,SAAS,GAAG,MAAMO,SAAM,EAAA,CAACD,UAAU,CAAC;YACvC,GAAGE,gBAAgB,EAAE;YACrBC,cAAc,EAACC,MAAM,EAAE;gBACrB,IAAIA,MAAM,KAAK,cAAc,EAAE;oBAC7BC,IAAG,CAACC,KAAK,CACPC,MAAK,EAAA,QAAA,CAACC,GAAG,CACP,yKAAyK,CAC1K,GAAGD,MAAK,EAAA,QAAA,CAACE,IAAI,CAAC,oEAAoE,CAAC,CACrF,CAAC;gBACJ,CAAC;YACH,CAAC;SACF,CAAC,CAAC;QAEHjB,KAAK,CAAC,aAAa,EAAE,IAAI,CAACE,SAAS,CAAC,CAAC;IACvC;UAEMgB,SAAS,GAAkB;QAC/BlB,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACzB,MAAMS,SAAM,EAAA,CAACS,SAAS,EAAE,CAAC;QACzB,IAAI,CAAChB,SAAS,GAAG,IAAI,CAAC;IACxB;CACD;AAED,SAASQ,gBAAgB,GAAG;IAC1B,MAAMS,oBAAoB,GAAGC,IAAG,IAAA,CAACC,qBAAqB,AAAC;IACvD,IAAIF,oBAAoB,IAAI,OAAOA,oBAAoB,KAAK,QAAQ,EAAE;QACpEnB,KAAK,CAAC,UAAU,EAAEmB,oBAAoB,CAAC,CAAC;QACxC,OAAO;YAAEG,OAAO,EAAEH,oBAAoB;SAAE,CAAC;IAC3C,CAAC;IAED,IAAIG,OAAO,AAAQ,AAAC;IACpB,GAAG;QACD,mHAAmH;QACnHA,OAAO,GAAGC,IAAAA,WAAW,EAAA,YAAA,EAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAClD,QAAS,CAAC,eAAeC,IAAI,CAACH,OAAO,CAAC,EAAE;IACxCtB,KAAK,CAAC,UAAU,EAAEsB,OAAO,CAAC,CAAC;IAC3B,OAAO;QAAEA,OAAO;KAAE,CAAC;AACrB,CAAC"}